import asyncio
import json
from pyrogram import Client
from pyrogram.errors import FloodWait, RPCError, SlowmodeWait
from pyrogram.types import Message
from pyrogram.enums import ParseMode

from keys import API_ID, API_HASH

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAX_RETRIES = 3
DOWNLOAD_TIMEOUT = 60
SEND_TIMEOUT = 30
CHECK_INTERVAL = 120  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
STATE_FILE = "last_message.json"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID

async def get_last_processed_id(donor_id: int) -> int:
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get(str(donor_id), 0)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0


async def save_last_processed_id(donor_id: int, msg_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = {}
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            pass

        data[str(donor_id)] = msg_id

        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")


async def fetch_new_messages(client: Client, donor_id: int, last_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–µ–µ last_id (–≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)"""
    new_messages = []
    async for msg in client.get_chat_history(donor_id, limit=10):  # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        if msg.id > last_id:
            new_messages.append(msg)
        else:
            break  # –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –∑–Ω–∞—á–∏—Ç –¥–∞–ª—å—à–µ —Å—Ç–∞—Ä—ã–µ
    return new_messages[::-1]  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º


async def download_media(msg: Message):
    for attempt in range(MAX_RETRIES):
        try:
            return await asyncio.wait_for(msg.download(in_memory=True), timeout=DOWNLOAD_TIMEOUT)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        except FloodWait as e:
            wait = e.value
            print(f"‚è≥ FloodWait –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: –∂–¥—ë–º {wait} —Å–µ–∫")
            await asyncio.sleep(wait)
            continue
        except RPCError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break
        await asyncio.sleep(1)
    return None


async def send_with_retry(client: Client, func, *args, **kwargs):
    for attempt in range(MAX_RETRIES):
        try:
            return await asyncio.wait_for(func(*args, **kwargs), timeout=SEND_TIMEOUT)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        except FloodWait as e:
            wait = e.value
            print(f"‚è≥ FloodWait: –∂–¥—ë–º {wait} —Å–µ–∫")
            await asyncio.sleep(wait)
            continue
        except SlowmodeWait as e:
            wait = e.value
            print(f"‚è≥ Slowmode: –∂–¥—ë–º {wait} —Å–µ–∫")
            await asyncio.sleep(wait)
            continue
        except RPCError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break
        await asyncio.sleep(1)
    return None


async def clone_new_messages(donor_channel_id: int, my_channel_id: int):
    async with Client('my_session', api_id=API_ID, api_hash=API_HASH) as client:
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID
        last_id = await get_last_processed_id(donor_channel_id)
        print(f"üü¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                new_msgs = await fetch_new_messages(client, donor_channel_id, last_id)
                if new_msgs:
                    print(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(new_msgs)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")

                    for msg in new_msgs:
                        print(f"üì¶ –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}")
                        try:
                            if msg.service:
                                print("‚è≠Ô∏è –°–ª—É–∂–µ–±–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                                continue

                            if msg.video:
                                video = await download_media(msg)
                                if video:
                                    await send_with_retry(
                                        client,
                                        client.send_video,
                                        chat_id=my_channel_id,
                                        video=video,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")

                            elif msg.photo:
                                photo = await download_media(msg)
                                if photo:
                                    await send_with_retry(
                                        client,
                                        client.send_photo,
                                        chat_id=my_channel_id,
                                        photo=photo,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")

                            elif msg.document:
                                doc = await download_media(msg)
                                if doc:
                                    await send_with_retry(
                                        client,
                                        client.send_document,
                                        chat_id=my_channel_id,
                                        document=doc,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")

                            elif msg.text:
                                await send_with_retry(
                                    client,
                                    client.send_message,
                                    chat_id=my_channel_id,
                                    text=msg.text,
                                    parse_mode=ParseMode.HTML
                                )

                            else:
                                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∏–ø: {msg.media or 'unknown'}")

                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
                            last_id = msg.id
                            await save_last_processed_id(donor_channel_id, last_id)

                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {msg.id}: {e}")

                    print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.")
                else:
                    print(f"‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL} —Å–µ–∫...")

                await asyncio.sleep(CHECK_INTERVAL)

            except Exception as e:
                print(f"üö® –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(CHECK_INTERVAL)


if __name__ == '__main__':
    DONOR_ID = -1001876663463
    MY_ID = -1002763227980
    asyncio.run(clone_new_messages(DONOR_ID, MY_ID))
