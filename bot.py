# bot.py
import asyncio
import json
import os
# from http.server import HTTPServer, SimpleHTTPRequestHandler # –£–±–∏—Ä–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
# import threading # –£–±–∏—Ä–∞–µ–º threading –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from pyrogram.errors import FloodWait, SlowmodeWait, RPCError

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ ===
DONOR_ID = -1001876663463  # –ö–∞–Ω–∞–ª-–¥–æ–Ω–æ—Ä
MY_ID = -1002763227980     # –¢–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

# === –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CHECK_INTERVAL = 15         # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
STATE_FILE = "last_message.json"
SESSION_NAME = "cloner_user"
BOT_SESSION = "cloner_bot"

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
monitoring = False
last_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


# === –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID ===
async def get_last_id():
    try:
        with open(STATE_FILE, 'r') as f:
            data = json.load(f)
            return data.get(str(DONOR_ID), 0)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0


# === –§—É–Ω–∫—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π ID ===
async def save_last_id(msg_id: int):
    try:
        data = {}
        try:
            with open(STATE_FILE, 'r') as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            pass
        data[str(DONOR_ID)] = msg_id
        with open(STATE_FILE, 'w') as f:
            json.dump(data, f)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω ID: {msg_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID: {e}")


# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ ===
async def download_media(msg: Message):
    for attempt in range(3):
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}")
            return await asyncio.wait_for(msg.download(in_memory=True), timeout=60)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}")
        except FloodWait as e:
            print(f"‚è≥ FloodWait –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: –∂–¥—ë–º {e.value} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.value)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
            break
        await asyncio.sleep(1)
    return None


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö ===
async def send_with_retry(client, func, *args, **kwargs):
    for attempt in range(3):
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            return await func(*args, **kwargs)
        except FloodWait as e:
            wait = e.value
            print(f"‚è≥ FloodWait: –∂–¥—ë–º {wait} —Å–µ–∫.")
            await asyncio.sleep(wait)
        except SlowmodeWait as e:
            wait = e.value
            print(f"‚è≥ Slowmode: –∂–¥—ë–º {wait} —Å–µ–∫.")
        except RPCError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            break
        await asyncio.sleep(1)
    return None


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ===
async def clone_loop(bot_client):
    global last_status, monitoring
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    last_id = await get_last_id()
    last_status = f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}"
    print(last_status)

    async with Client(SESSION_NAME, api_id=API_ID, api_hash=API_HASH) as user_client:
        while monitoring:
            try:
                print("üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                new_msgs = []
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                async for msg in user_client.get_chat_history(DONOR_ID, limit=10):
                    if msg.id > last_id:
                        new_msgs.append(msg)
                    else:
                        break  # –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                new_msgs = new_msgs[::-1] # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

                if new_msgs:
                    print(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(new_msgs)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    for msg in new_msgs:
                        if msg.service:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ
                            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}")
                            continue

                        try:
                            print(f"üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}")
                            if msg.video:
                                video = await download_media(msg)
                                if video:
                                    await send_with_retry(
                                        user_client, user_client.send_video,
                                        chat_id=MY_ID, video=video,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                            elif msg.photo:
                                photo = await download_media(msg)
                                if photo:
                                    await send_with_retry(
                                        user_client, user_client.send_photo,
                                        chat_id=MY_ID, photo=photo,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                            elif msg.document:
                                doc = await download_media(msg)
                                if doc:
                                    await send_with_retry(
                                        user_client, user_client.send_document,
                                        chat_id=MY_ID, document=doc,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                            elif msg.text:
                                await send_with_retry(
                                    user_client, user_client.send_message,
                                    chat_id=MY_ID, text=msg.text,
                                    parse_mode=ParseMode.HTML
                                )

                            # –û–±–Ω–æ–≤–ª—è–µ–º ID
                            last_id = msg.id
                            await save_last_id(last_id)

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                            # await bot_client.send_message(ADMIN_ID, f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{msg.id}")

                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {msg.id}: {e}")

                else:
                     print("‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

                await asyncio.sleep(CHECK_INTERVAL)

            except Exception as e:
                print(f"üö® –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(CHECK_INTERVAL)

        # –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        last_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        # await bot_client.send_message(ADMIN_ID, "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = Client(BOT_SESSION, api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

    # === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ ===
    @bot.on_message(filters.command("start") & filters.user(ADMIN_ID))
    async def start_monitoring_handler(client, message: Message):
        global monitoring
        user_id = message.from_user.id
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_id}")
        if not monitoring:
            monitoring = True
            # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ clone_loop
            asyncio.create_task(clone_loop(client))
            await message.reply("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
            print("üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
        else:
            await message.reply("‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")

    @bot.on_message(filters.command("stop") & filters.user(ADMIN_ID))
    async def stop_monitoring_handler(client, message: Message):
        global monitoring
        user_id = message.from_user.id
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stop –æ—Ç {user_id}")
        monitoring = False
        await message.reply("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        print("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop")

    @bot.on_message(filters.command("status") & filters.user(ADMIN_ID))
    async def status_handler(client, message: Message):
        user_id = message.from_user.id
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç {user_id}")
        await message.reply(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n{last_status}")
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: {last_status}")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ Telegram...")
    await bot.start()
    print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Telegram")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(ADMIN_ID, "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, /stop, /status")
        print("‚úâÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –≤ –∂–∏–≤—ã—Ö
    try:
        while True:
            await asyncio.sleep(10) # –£–º–µ–Ω—å—à–∞–µ–º sleep –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    except (KeyboardInterrupt, SystemExit):
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    finally:
        print("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await bot.stop()
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    print("--- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---")
    asyncio.run(main())
    print("--- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---")
