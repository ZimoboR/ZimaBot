# bot.py
import asyncio
import json
import os
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from pyrogram.errors import FloodWait, RPCError, SlowmodeWait

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ ===
DONOR_ID = -1001876663463  # –ö–∞–Ω–∞–ª-–¥–æ–Ω–æ—Ä
MY_ID = -1002763227980     # –¢–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

# === –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
MAX_RETRIES = 3
DOWNLOAD_TIMEOUT = 60
SEND_TIMEOUT = 30
CHECK_INTERVAL = 15  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
STATE_FILE = "last_message.json"
SESSION_NAME = "cloner_user"
BOT_SESSION = "cloner_bot"

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
monitoring_task = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
last_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
bot_client = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞


# === –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID ===
async def get_last_processed_id(donor_id: int) -> int:
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get(str(donor_id), 0)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0


# === –§—É–Ω–∫—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π ID ===
async def save_last_processed_id(donor_id: int, msg_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = {}
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            pass

        data[str(donor_id)] = msg_id

        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")


# === –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def fetch_new_messages(client: Client, donor_id: int, last_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–µ–µ last_id (–≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)"""
    new_messages = []
    async for msg in client.get_chat_history(donor_id, limit=10):  # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        if msg.id > last_id:
            new_messages.append(msg)
        else:
            break  # –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –∑–Ω–∞—á–∏—Ç –¥–∞–ª—å—à–µ —Å—Ç–∞—Ä—ã–µ
    return new_messages[::-1]  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º


# === –§—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ ===
async def download_media(msg: Message):
    for attempt in range(MAX_RETRIES):
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}")
            return await asyncio.wait_for(msg.download(in_memory=True), timeout=DOWNLOAD_TIMEOUT)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        except FloodWait as e:
            wait = e.value
            print(f"‚è≥ FloodWait –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: –∂–¥—ë–º {wait} —Å–µ–∫")
            await asyncio.sleep(wait)
            continue
        except RPCError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break
        await asyncio.sleep(1)
    return None


# === –§—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ ===
async def send_with_retry(client: Client, func, *args, **kwargs):
    for attempt in range(MAX_RETRIES):
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            return await asyncio.wait_for(func(*args, **kwargs), timeout=SEND_TIMEOUT)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        except FloodWait as e:
            wait = e.value
            print(f"‚è≥ FloodWait: –∂–¥—ë–º {wait} —Å–µ–∫")
            await asyncio.sleep(wait)
            continue
        except SlowmodeWait as e:
            wait = e.value
            print(f"‚è≥ Slowmode: –∂–¥—ë–º {wait} —Å–µ–∫")
            await asyncio.sleep(wait)
            continue
        except RPCError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break
        await asyncio.sleep(1)
    return None


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ) ===
async def monitoring_loop():
    global last_status
    async with Client(SESSION_NAME, api_id=API_ID, api_hash=API_HASH) as user_client:
        last_id = await get_last_processed_id(DONOR_ID)
        last_status = f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}"
        print(last_status)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
        if bot_client:
            try:
                await bot_client.send_message(ADMIN_ID, last_status)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        while True:  # –¶–∏–∫–ª –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω, –µ—Å–ª–∏ monitoring_task –æ—Ç–º–µ–Ω—ë–Ω
            try:
                print("üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                new_msgs = await fetch_new_messages(user_client, DONOR_ID, last_id)
                if new_msgs:
                    print(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(new_msgs)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")

                    for msg in new_msgs:
                        print(f"üì¶ –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}")
                        try:
                            if msg.service:
                                print("‚è≠Ô∏è –°–ª—É–∂–µ–±–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                                continue

                            if msg.video:
                                video = await download_media(msg)
                                if video:
                                    await send_with_retry(
                                        user_client,
                                        user_client.send_video,
                                        chat_id=MY_ID,
                                        video=video,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")

                            elif msg.photo:
                                photo = await download_media(msg)
                                if photo:
                                    await send_with_retry(
                                        user_client,
                                        user_client.send_photo,
                                        chat_id=MY_ID,
                                        photo=photo,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")

                            elif msg.document:
                                doc = await download_media(msg)
                                if doc:
                                    await send_with_retry(
                                        user_client,
                                        user_client.send_document,
                                        chat_id=MY_ID,
                                        document=doc,
                                        caption=msg.caption.html if msg.caption else None,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")

                            elif msg.text:
                                await send_with_retry(
                                    user_client,
                                    user_client.send_message,
                                    chat_id=MY_ID,
                                    text=msg.text,
                                    parse_mode=ParseMode.HTML
                                )

                            else:
                                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∏–ø: {msg.media or 'unknown'}")

                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
                            last_id = msg.id
                            await save_last_processed_id(DONOR_ID, last_id)

                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {msg.id}: {e}")

                    print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.")
                else:
                    print(f"‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL} —Å–µ–∫...")

                await asyncio.sleep(CHECK_INTERVAL)

            except asyncio.CancelledError:
                print("üõë –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                last_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞)"
                break
            except Exception as e:
                print(f"üö® –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                last_status = f"üü° –û—à–∏–±–∫–∞: {e}"
                await asyncio.sleep(CHECK_INTERVAL)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

        last_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print(last_status)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if bot_client:
            try:
                await bot_client.send_message(ADMIN_ID, "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except:
                pass


# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@Client.on_message(filters.command("start") & filters.user(ADMIN_ID))
async def start_monitoring(client: Client, message: Message):
    global monitoring_task, last_status
    if monitoring_task is None or monitoring_task.done():
        monitoring_task = asyncio.create_task(monitoring_loop())
        await message.reply("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
        print("üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
    else:
        await message.reply("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

@Client.on_message(filters.command("stop") & filters.user(ADMIN_ID))
async def stop_monitoring(client: Client, message: Message):
    global monitoring_task, last_status
    if monitoring_task and not monitoring_task.done():
        monitoring_task.cancel()
        try:
            await monitoring_task
        except asyncio.CancelledError:
            pass
        monitoring_task = None
        await message.reply("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        print("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop")
    else:
        await message.reply("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

@Client.on_message(filters.command("status") & filters.user(ADMIN_ID))
async def status(client: Client, message: Message):
    await message.reply(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n{last_status}")
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: {last_status}")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    global bot_client
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
    bot_client = Client(BOT_SESSION, api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot_client.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –£–ø—Ä–∞–≤–ª—è–π —á–µ—Ä–µ–∑ Telegram.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot_client.send_message(ADMIN_ID, "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, /stop, /status")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –≤ –∂–∏–≤—ã—Ö
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            await asyncio.sleep(10)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        print("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await bot_client.stop()
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == '__main__':
    asyncio.run(main())
